#region Using directives

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Data;
using System.IO;
using System.Web;
using System.Web.SessionState;
using SobekCM.Core.Aggregations;
using SobekCM.Core.ApplicationState;
using SobekCM.Core.Client;
using SobekCM.Core.Configuration;
using SobekCM.Core.Configuration.Localization;
using SobekCM.Core.MemoryMgmt;
using SobekCM.Core.Navigation;
using SobekCM.Core.UI_Configuration;
using SobekCM.Core.UI_Configuration.StaticResources;
using SobekCM.Engine_Library.Configuration;
using SobekCM.Engine_Library.Database;
using SobekCM.Library.Database;
using SobekCM.Library.UI;
using SobekCM.Tools;

#endregion

namespace SobekCM.Library.HTML
{
    /// <summary> Internal html subwriter renders all of the screens about the collections and items
    /// held within this digital library, the list of items edited or recently added, and the current memory profile </summary>
    /// <remarks> This class extends the <see cref="abstractHtmlSubwriter"/> abstract class. </remarks>
    public class Internal_HtmlSubwriter : abstractHtmlSubwriter
    {

        /// <summary> Constructor for a new instance of the Internal_HtmlSubwriter class </summary>
        /// <param name="RequestSpecificValues"> All the necessary, non-global data specific to the current request </param>
        public Internal_HtmlSubwriter(RequestCache RequestSpecificValues) : base(RequestSpecificValues)
        {
            // Do nothing
        }

        /// <summary> Writes the HTML generated by this internal html subwriter directly to the response stream </summary>
        /// <param name="Output"> Stream to which to write the HTML for this subwriter </param>
        /// <param name="Tracer"> Trace object keeps a list of each method executed and important milestones in rendering </param>
        /// <returns> TRUE -- Value indicating if html writer should finish the page immediately after this, or if there are other controls or routines which need to be called first </returns>
        public override bool Write_HTML(TextWriter Output, Custom_Tracer Tracer)
        {
            Tracer.Add_Trace("Internal_HtmlSubwriter.Write_HTML", "Rendering HTML");

            string collection_details_title = "Active and Inactive Collections";
            string new_items_title = "Newly Added or Modified Items";
            string memory_mgmt_title = "Current Memory Profile";
            const string WORDMARKS_TITLE = "Wordmarks";
            const string BUILD_FAILURES_TITLE = "Build Failure Log";
            const string UNAUTHORIZED_TITLE = "Internal Users Only";

            if (RequestSpecificValues.Current_Mode.Language == Web_Language_Enum.Spanish)
            {
                collection_details_title = "Activos e inactivos colecciones";
                new_items_title = "Objetos recien Agregados o Modificados";
                memory_mgmt_title = "Actual del uso de la memoria";
            }

            if (RequestSpecificValues.Current_Mode.Language == Web_Language_Enum.French)
            {
                collection_details_title = "Actifs et inactifs collections";
                new_items_title = "Documents récents ou venant d'être modifié";
                memory_mgmt_title = "L'utilisation de la mémoire en cours";
            }

            // Ensure there is a valid RequestSpecificValues.Current_User, and the RequestSpecificValues.Current_User is internal
            bool isAuthorized = (RequestSpecificValues.Current_User != null) && ((RequestSpecificValues.Current_User.Is_Internal_User) || ( RequestSpecificValues.Current_User.Is_Portal_Admin ) || ( RequestSpecificValues.Current_User.Is_System_Admin ));

            // Save the current type
            Internal_Type_Enum type = RequestSpecificValues.Current_Mode.Internal_Type;

            // Add the banner
            Add_Banner(Output, "sbkAhs_BannerDiv", WebPage_Title.Replace("{0} ", ""), RequestSpecificValues.Current_Mode, RequestSpecificValues.HTML_Skin, RequestSpecificValues.Top_Collection);

            if (!isAuthorized)
            {
                Output.WriteLine("<div class=\"SobekSearchPanel\">");
                Output.WriteLine("  <h1>" + UNAUTHORIZED_TITLE + "</h1>");
                Output.WriteLine("</div>");

                Output.WriteLine("<div class=\"SobekText\">");
                Output.WriteLine("<br /><br />");
                Output.WriteLine("<blockquote>");
                Output.WriteLine("You are not authorized to access this view.");
                Output.WriteLine("<br /><br />");
                Output.WriteLine("<a href=\"" + RequestSpecificValues.Current_Mode.Base_URL + "l\"> Click here to return to the digital library home page. </a>");
                Output.WriteLine("</blockquote>");
                Output.WriteLine("<br /><br />");
                Output.WriteLine("</div>");

            }
            else
            {
                // Add the RequestSpecificValues.Current_User-specific main menu
                MainMenus_Helper_HtmlSubWriter.Add_UserSpecific_Main_Menu(Output, RequestSpecificValues);

                // Start the page container
                Output.WriteLine("<div id=\"pagecontainer\">");
                Output.WriteLine("<br />");

                // Determine the title
                string stat_title = String.Empty;
                switch( type )
                {
                    case Internal_Type_Enum.Aggregations_List:
                    case Internal_Type_Enum.Aggregations_Tree:
                        stat_title = collection_details_title;
                        break;

                    case Internal_Type_Enum.New_Items:
                        stat_title = new_items_title;
                        break;

                    case Internal_Type_Enum.Build_Failures:
                        stat_title = BUILD_FAILURES_TITLE;
                        break;

                    case Internal_Type_Enum.Cache:
                        stat_title = memory_mgmt_title;
                        break;

                    case Internal_Type_Enum.Wordmarks:
                        stat_title = WORDMARKS_TITLE;
                        break;
                }

                Output.WriteLine("<div class=\"SobekSearchPanel\">");
                Output.WriteLine("  <h1>" + stat_title + "</h1>");
                Output.WriteLine("</div>");

                // Set the type back
                RequestSpecificValues.Current_Mode.Internal_Type = type;

                // Add the appropriate text
                switch (type)
                {
                    case Internal_Type_Enum.Aggregations_List:
                        add_aggregations_master_list_html(Output, Tracer);
                        break;

                    case Internal_Type_Enum.Aggregations_Tree:
                        add_aggregations_tree_html(Output, Tracer);
                        break;

                    case Internal_Type_Enum.Cache:
                        add_cache_html(Output, Tracer);
                        break;


                    case Internal_Type_Enum.New_Items:
                        DataTable newItems = Engine_Database.Tracking_Update_List(Tracer);
                        add_new_item_html(Output, newItems, Tracer);
                        break;

                    case Internal_Type_Enum.Build_Failures:
                        int start_month = DateTime.Now.Month;
                        int start_year = DateTime.Now.Year;
                        int end_month = DateTime.Now.Month;
                        int end_year = DateTime.Now.Year;
                        if ((!String.IsNullOrEmpty(RequestSpecificValues.Current_Mode.Info_Browse_Mode)) && (RequestSpecificValues.Current_Mode.Info_Browse_Mode.Length == 12))
                        {
                            Int32.TryParse(RequestSpecificValues.Current_Mode.Info_Browse_Mode.Substring(0, 4), out start_year);
                            Int32.TryParse(RequestSpecificValues.Current_Mode.Info_Browse_Mode.Substring(4, 2), out start_month);
                            Int32.TryParse(RequestSpecificValues.Current_Mode.Info_Browse_Mode.Substring(6, 4), out end_year);
                            Int32.TryParse(RequestSpecificValues.Current_Mode.Info_Browse_Mode.Substring(10, 2), out end_month);

                            if (start_year > end_year)
                            {
                                int save_year = start_year;
                                int save_month = start_month;
                                start_year = end_year;
                                start_month = end_month;
                                end_year = save_year;
                                end_month = save_month;
                            }

                            if ((start_year == end_year) && (end_month < start_month))
                            {
                                int save_month2 = start_month;
                                start_month = end_month;
                                end_month = save_month2;
                            }
                        }
                        add_build_failures(Output, start_month, start_year, end_month, end_year, Tracer);
                        break;

                    case Internal_Type_Enum.Wordmarks:
                        add_wordmarks(Output, Tracer);
                        break;
                }
            }

            return true;
        }

        #region Method to add the wordmarks to the response stream

        /// <summary> Adds the wordmarks to the response stream</summary>
        /// <param name="Output"> Stream to which to write the HTML for this subwriter </param>
        /// <param name="Tracer"> Trace object keeps a list of each method executed and important milestones in rendering </param>
        protected internal void add_wordmarks(TextWriter Output, Custom_Tracer Tracer)
        {
            Tracer.Add_Trace("Internal_HtmlSubwriter.add_wordmarks", "Rendering HTML");

            if (UI_ApplicationCache_Gateway.Icon_List.Count > 0)
            {
                Output.WriteLine("<br />");
                Output.WriteLine("");

                if ((RequestSpecificValues.Current_User != null) && ((RequestSpecificValues.Current_User.Is_Portal_Admin) || (RequestSpecificValues.Current_User.Is_System_Admin)))
                {
                    RequestSpecificValues.Current_Mode.Mode = Display_Mode_Enum.Administrative;
                    RequestSpecificValues.Current_Mode.Admin_Type = Admin_Type_Enum.Wordmarks;

                    Output.Write("Since you are an administrator, you can <a href=\"" + UrlWriterHelper.Redirect_URL(RequestSpecificValues.Current_Mode) + "\">manage the wordmarks from the admin screen</a>.<br />");

                    RequestSpecificValues.Current_Mode.Mode = Display_Mode_Enum.Internal;
                }

                Output.WriteLine("</div>");
                Output.WriteLine("<center>");
                Output.WriteLine("<table border=\"0px\" cellspacing=\"0px\" width=\"1000px\" class=\"statsTable\">");
                Output.WriteLine("  <tr><td bgcolor=\"#e7e7e7\" colspan=\"5\"></td></tr>");
                Output.WriteLine("  <tr align=\"center\" valign=\"bottom\" >");

                int current_column = 0;
                SortedList<string, Wordmark_Icon> sortedIcons = new SortedList<string, Wordmark_Icon>();
                foreach (Wordmark_Icon thisIcon in UI_ApplicationCache_Gateway.Icon_List.Values)
                {
                    sortedIcons.Add(thisIcon.Code, thisIcon);
                }

                foreach (Wordmark_Icon thisIcon in sortedIcons.Values)
                {
                    Output.Write("    <td width=\"200px\">");
                    if (thisIcon.Link.Length > 0)
                        Output.Write("<a href=\"" + thisIcon.Link + "\" target=\"_blank\">");
                    Output.Write("<img border=\"0px\" class=\"SobekcmItemWorkdmark\" src=\"" + RequestSpecificValues.Current_Mode.Base_URL + "design/wordmarks/" + thisIcon.Image_FileName + "\"");
                    if (thisIcon.Title.Length > 0)
                        Output.Write(" title=\"" + thisIcon.Title + "\"");
                    Output.Write(" />");
                    if (thisIcon.Link.Length > 0)
                        Output.Write("</a>");
                    Output.WriteLine("<br /><b>" + thisIcon.Code + "</b></td>");

                    current_column++;

                    if (current_column >= 5)
                    {
                        Output.WriteLine("  </tr>");
                        Output.WriteLine("  <tr><td bgcolor=\"#e7e7e7\" colspan=\"5\"></td></tr>");
                        Output.WriteLine("  <tr align=\"center\" valign=\"bottom\" >");
                        current_column = 0;
                    }
                }

                Output.WriteLine("  <tr><td bgcolor=\"#e7e7e7\" colspan=\"5\"></td></tr>");

                Output.WriteLine("</table>");
                Output.WriteLine("</center>");
                Output.WriteLine("<br /><br />");
                Output.WriteLine("<div id=\"pagecontainer_resumed\">");
            }
            else
            {
                Output.WriteLine("<br /><br />");
                Output.WriteLine("<div style=\"text-align:center;width:100%;\">No wordmarks in this system</div>");

                Output.WriteLine("<br /><br />");

                if ((RequestSpecificValues.Current_User != null) && ((RequestSpecificValues.Current_User.Is_Portal_Admin) || (RequestSpecificValues.Current_User.Is_System_Admin)))
                {
                    RequestSpecificValues.Current_Mode.Mode = Display_Mode_Enum.Administrative;
                    RequestSpecificValues.Current_Mode.Admin_Type = Admin_Type_Enum.Wordmarks;

                    Output.Write("Since you are an administrator, you can <a href=\"" + UrlWriterHelper.Redirect_URL(RequestSpecificValues.Current_Mode) + "\">manage the wordmarks from the admin screen</a>.<br />");

                    RequestSpecificValues.Current_Mode.Mode = Display_Mode_Enum.Internal;
                }
                else
                {

                    Output.WriteLine("<div style=\"text-align:center;width:100%;\">Administrators may add wordmarks through the wordmarks admin screens</div>");
                }

                Output.WriteLine("<br /><br />");
            }
        }

        #endregion

        #region Method to add the build failures to the response stream

        /// <summary> Adds the list of build failures to the output stream for a given date range</summary>
        /// <param name="FirstMonth"> Month for the first date in the date range </param>
        /// <param name="FirstYear"> Year for the first date in the date range </param>
        /// <param name="SecondYear"> Year for the last date in the date range</param>
        /// <param name="SecondMonth"> Month for the last date in the date range</param>
        /// <param name="Output"> Stream to which to write the HTML for this subwriter </param>
        /// <param name="Tracer"> Trace object keeps a list of each method executed and important milestones in rendering </param>
        protected internal void add_build_failures(TextWriter Output, int FirstMonth, int FirstYear, int SecondMonth, int SecondYear, Custom_Tracer Tracer)
        {
            RequestSpecificValues.Current_Mode.Internal_Type = Internal_Type_Enum.Build_Failures;

            Tracer.Add_Trace("Internal_HtmlSubwriter.add_build_failures", "Rendering HTML");

            string currentInfoBrowseMode = RequestSpecificValues.Current_Mode.Info_Browse_Mode;
            RequestSpecificValues.Current_Mode.Info_Browse_Mode = String.Empty;
            string redirect_url = UrlWriterHelper.Redirect_URL(RequestSpecificValues.Current_Mode);
            RequestSpecificValues.Current_Mode.Info_Browse_Mode = currentInfoBrowseMode;

            Output.WriteLine("<br />");
            Output.WriteLine("");

            Output.WriteLine("<div class=\"SobekText\">");
            Output.WriteLine("<p>The data below shows errors which occurred while loading new items through the builder.  These can be displayed by month and year below by selecting the start and end month.  These failures will continue to display until they are manually cleared by a DLC technician or until the item successfully loads after the failure or warning.</p>" );
            Output.WriteLine();
            Output.WriteLine("<h2>Selected Date Range</h2>");
            Output.WriteLine();
            Output.WriteLine("<p>The failures and warnings which were encountered during build are searchable below, by month:</p>");

            Output.WriteLine("<form name=\"statistics_form\" action=\"Javascript:date_jump_sobekcm('" + redirect_url + "')\" id=\"addedForm\">");
            Output.WriteLine("  <blockquote>");
            Output.WriteLine("    From: <select name=\"date1_selector\" class=\"SobekStatsDateSelector\">");

            int select_month = DateTime.Now.Month;
            int select_year = DateTime.Now.Year - 1;
            while ((select_month != DateTime.Now.Month) || (select_year != DateTime.Now.Year )) 
            {
                if ((FirstMonth == select_month) && (FirstYear == select_year))
                {
                    Output.WriteLine("      <option value=\"" + select_year + select_month.ToString().PadLeft(2, '0') + "\" selected=\"selected\" >" + Month_From_Int(select_month) + " " + select_year + "</option>");
                }
                else
                {
                    Output.WriteLine("      <option value=\"" + select_year + select_month.ToString().PadLeft(2, '0') + "\">" + Month_From_Int(select_month) + " " + select_year + "</option>");
                }

                select_month++;
                if (select_month > 12)
                {
                    select_month = 1;
                    select_year++;
                }
            }
            if ((FirstMonth == select_month) && (FirstYear == select_year))
            {
                Output.WriteLine("      <option value=\"" + select_year + select_month.ToString().PadLeft(2, '0') + "\" selected=\"selected\" >" + Month_From_Int(select_month) + " " + select_year + "</option>");
            }
            else
            {
                Output.WriteLine("      <option value=\"" + select_year + select_month.ToString().PadLeft(2, '0') + "\">" + Month_From_Int(select_month) + " " + select_year + "</option>");
            }
            Output.WriteLine("    </select>");
            Output.WriteLine("    &nbsp; &nbsp;");
            Output.WriteLine("    To: <select name=\"date2_selector\" class=\"SobekStatsDateSelector\" >");

            select_month = DateTime.Now.Month;
            select_year = DateTime.Now.Year - 1;
            while ((select_month != DateTime.Now.Month) || (select_year != DateTime.Now.Year)) 
            {
                if ((SecondMonth == select_month) && (SecondYear == select_year))
                {
                    Output.WriteLine("      <option value=\"" + select_year + select_month.ToString().PadLeft(2, '0') + "\" selected=\"selected\" >" + Month_From_Int(select_month) + " " + select_year + "</option>");
                }
                else
                {
                    Output.WriteLine("      <option value=\"" + select_year + select_month.ToString().PadLeft(2, '0') + "\">" + Month_From_Int(select_month) + " " + select_year + "</option>");
                }

                select_month++;
                if (select_month > 12)
                {
                    select_month = 1;
                    select_year++;
                }
            }
            if ((SecondMonth == select_month) && (SecondYear == select_year))
            {
                Output.WriteLine("      <option value=\"" + select_year + select_month.ToString().PadLeft(2, '0') + "\" selected=\"selected\" >" + Month_From_Int(select_month) + " " + select_year + "</option>");
            }
            else
            {
                Output.WriteLine("      <option value=\"" + select_year + select_month.ToString().PadLeft(2, '0') + "\">" + Month_From_Int(select_month) + " " + select_year + "</option>");
            }

            Output.WriteLine("    </select>");
            Output.WriteLine("    &nbsp; &nbsp;");
            Output.WriteLine("    <button title=\"Select Range\" class=\"go_button\" onclick=\"date_jump_sobekcm('" + redirect_url + "'); return false;\"></button>");
            Output.WriteLine("  </blockquote>");
            Output.WriteLine("</form>");
            Output.WriteLine("<p>To change the date shown, choose your dates above and hit the GO button.</p>");
            Output.WriteLine();
            Output.WriteLine("<h2>Build Failures and Warnings</h2>");
            Output.WriteLine();
            Output.WriteLine("</div>");

            // Pull this date from the database
            DataTable values = Engine_Database.Builder_Get_Error_Logs(Tracer, new DateTime( FirstYear, FirstMonth, 1 ), new DateTime( SecondYear, SecondMonth, 1).AddMonths(1));

            if ((values == null) || (values.Rows.Count == 0))
            {
                Output.WriteLine("<br />");
                Output.WriteLine("<center><b>No uncleared warnings or failures for the selected date range.</b></center>");
                Output.WriteLine("<br /><br />");
                return;
            }


            // Add the header information
            Output.WriteLine("<center>");
            Output.WriteLine("<table width=\"700px\" border=\"0px\" cellspacing=\"0px\"  class=\"statsTable\">");
            Output.WriteLine("  <tr align=\"left\" bgcolor=\"#0022a7\" >");
            Output.WriteLine("    <th width=\"150px\"><span style=\"color: White\"><b>BIBID : VID</b></span></th>");
            Output.WriteLine("    <th width=\"150px\"><span style=\"color: White\"><b>METS TYPE</b></span></th>");
            Output.WriteLine("    <th width=\"400px\"><span style=\"color: White\"><b>DESCRIPTION</b></span></th>");
            Output.WriteLine("  </tr>");

            // Now, add each line
            string lastDate = String.Empty;
            foreach (DataRow thisRow in values.Rows)
            {
                // Get this date
                string thisDate = thisRow[4].ToString().Split(" ".ToCharArray())[0];

                // Is this a new date?
                if (thisDate != lastDate)
                {
                    Output.WriteLine("  <tr align=\"left\" bgcolor=\"#7d90d5\" ><td colspan=\"3\"><span style=\"color: White\"><b>" + thisDate + "</b></span></td></tr>");
                    lastDate = thisDate;
                }

                Output.WriteLine("  <tr><td bgcolor=\"#e7e7e7\" colspan=\"3\"></td></tr>");
                Output.WriteLine("  <tr align=\"left\">");
                Output.WriteLine("    <td><a href=\"?b=" + thisRow[0] + "&v=" + thisRow[1] + "\">" + thisRow[0] + " : " + thisRow[1] + "</a></td>");
                Output.WriteLine("    <td>" + thisRow[2] + "</td>");
                Output.WriteLine("    <td>" + thisRow[3] + "</td>");
                Output.WriteLine("  </tr>");
            }
            Output.WriteLine("  <tr><td bgcolor=\"#e7e7e7\" colspan=\"3\"></td></tr>");

            // Close out this table
            Output.WriteLine("</table>");
            Output.WriteLine("</center>");
            Output.WriteLine("<br />");
            Output.WriteLine();

        }

        #endregion

        #region Method to add the current memory profile to the response stream

        /// <summary> Adds the current memory profile to the response stream </summary>
        /// <param name="Output"> Stream to which to write the HTML for this subwriter </param>
        /// <param name="Tracer"> Trace object keeps a list of each method executed and important milestones in rendering </param>
        protected internal void add_cache_html(TextWriter Output, Custom_Tracer Tracer)
        {
            Tracer.Add_Trace("Internal_HtmlSubwriter.add_cache_html", "Rendering HTML");

            HttpApplicationState applicationState = HttpContext.Current.Application;
            HttpSessionState session = HttpContext.Current.Session;

            string global_values = "GLOBAL VALUES";
            string application_state = "APPLICATION STATE VALUES";
            string local_cache_state = "LOCALLY CACHED OBJECTS";
            string session_state = "SESSION STATE VALUES";
            string variable_name = "INSTANCE NAME";
            string key = "KEY";
            string objectTitle = "OBJECT";

            if (RequestSpecificValues.Current_Mode.Language == Web_Language_Enum.French)
                {
                    global_values = "VALEURS MONIDAL";
                    application_state = "APPLICATAION LES VALEURS DE L'ÉTAT";
                    local_cache_state = "MIS EN CACHE LOCALEMENT DES VALEURS";
                    session_state = "SESSION LES VALEURS DE L'ÉTAT";
                    variable_name = "Nom Instance";
                    key = "Clef";
                    objectTitle = "Objet";
                }

            if (RequestSpecificValues.Current_Mode.Language == Web_Language_Enum.Spanish)
                {
                    global_values = "GLOBAL VALORES";
                    application_state = "APLICACIÓN ESTADO VALORES";
                    local_cache_state = "LOCALMENTE EN CACHE LOS VALORES";
                    session_state = "SESIÓN ESTADO VALORES";
                    variable_name = "Instancia Nombre";
                    key = "Clave";
                    objectTitle = "Objeto";
                }

                // Start the application data
                Output.WriteLine("<br />");
                Output.WriteLine("");
                Output.WriteLine("<br /><br />");

                // Add the header information
                Output.WriteLine("<table width=\"720px\" cellspacing=\"0px\">");
                Output.WriteLine("  <tr align=\"center\" bgcolor=\"#0022a7\"><td colspan=\"2\"><span style=\"color: White\"><b>" + global_values + "</b></span></td></tr>");
                Output.WriteLine("  <tr align=\"left\" bgcolor=\"#7d90d5\">");
                Output.WriteLine("    <th align=\"left\"><span style=\"color: White\">" + variable_name + "</span></th>");
                Output.WriteLine("    <th align=\"left\"><span style=\"color: White\">" + objectTitle + "</span></th>");
                Output.WriteLine("  </tr>");

                // Add each global value
                Output.WriteLine("  <tr><td bgcolor=\"#e7e7e7\" colspan=\"2\"></td></tr>");
                Output.WriteLine("  <tr align=\"left\">" + Environment.NewLine + "    <td>Checked_List</td>" + Environment.NewLine + "    <td>SobekCM.Library.Application_State.Checked_Out_Items_List</td>" + Environment.NewLine + "  </tr>");

                Output.WriteLine("  <tr><td bgcolor=\"#e7e7e7\" colspan=\"2\"></td></tr>");
                Output.WriteLine("  <tr align=\"left\">" + Environment.NewLine + "    <td>Codes</td>" + Environment.NewLine + "    <td>SobekCM.Library.Application_State.Aggregation_Code_Manager</td>" + Environment.NewLine + "  </tr>");

                Output.WriteLine("  <tr><td bgcolor=\"#e7e7e7\" colspan=\"2\"></td></tr>");
                Output.WriteLine("  <tr align=\"left\">" + Environment.NewLine + "    <td>Collection_Aliases</td>" + Environment.NewLine + "    <td>Dictionary&lt;string,string&gt;</td>" + Environment.NewLine + "  </tr>");

                Output.WriteLine("  <tr><td bgcolor=\"#e7e7e7\" colspan=\"2\"></td></tr>");
                Output.WriteLine("  <tr align=\"left\">" + Environment.NewLine + "    <td>Icon_List</td>" + Environment.NewLine + "    <td>Dictionary&lt;string,SobekCM.Library.Application_State.Wordmark_Icon&gt;</td>" + Environment.NewLine + "  </tr>");

                Output.WriteLine("  <tr><td bgcolor=\"#e7e7e7\" colspan=\"2\"></td></tr>");
                Output.WriteLine("  <tr align=\"left\">" + Environment.NewLine + "    <td>IP_Restrictions</td>" + Environment.NewLine + "    <td>SobekCM.Library.Application_State.IP_Restriction_Ranges</td>" + Environment.NewLine + "  </tr>");

                Output.WriteLine("  <tr><td bgcolor=\"#e7e7e7\" colspan=\"2\"></td></tr>");
                Output.WriteLine("  <tr align=\"left\">" + Environment.NewLine + "    <td>Item_List</td>" + Environment.NewLine + "    <td>SobekCM.Library.Application_State.Item_Lookup_Object</td>" + Environment.NewLine + "  </tr>");

                Output.WriteLine("  <tr><td bgcolor=\"#e7e7e7\" colspan=\"2\"></td></tr>");
                Output.WriteLine("  <tr align=\"left\">" + Environment.NewLine + "    <td>Last_Refresh</td>" + Environment.NewLine + "    <td>DateTime</td>" + Environment.NewLine + "  </tr>");

                Output.WriteLine("  <tr><td bgcolor=\"#e7e7e7\" colspan=\"2\"></td></tr>");
                Output.WriteLine("  <tr align=\"left\">" + Environment.NewLine + "    <td>Search_History</td>" + Environment.NewLine + "    <td>SobekCM.Library.Application_State.Recent_Searches</td>" + Environment.NewLine + "  </tr>");

                Output.WriteLine("  <tr><td bgcolor=\"#e7e7e7\" colspan=\"2\"></td></tr>");
                Output.WriteLine("  <tr align=\"left\">" + Environment.NewLine + "    <td>StopWords</td>" + Environment.NewLine + "    <td>List&lt;string&gt;</td>" + Environment.NewLine + "  </tr>");               

                Output.WriteLine("  <tr><td bgcolor=\"#e7e7e7\" colspan=\"2\"></td></tr>");
                Output.WriteLine("  <tr align=\"left\">" + Environment.NewLine + "    <td>Skins</td>" + Environment.NewLine + "    <td>SobekCM.Library.Skins.Web_Skin_Collection</td>" + Environment.NewLine + "  </tr>");

                Output.WriteLine("  <tr><td bgcolor=\"#e7e7e7\" colspan=\"2\"></td></tr>");
                Output.WriteLine("  <tr align=\"left\">" + Environment.NewLine + "    <td>Stats_Date_Range</td>" + Environment.NewLine + "    <td>SobekCM.Library.Application_State.Statistics_Dates</td>" + Environment.NewLine + "  </tr>");

                Output.WriteLine("  <tr><td bgcolor=\"#e7e7e7\" colspan=\"2\"></td></tr>");
                Output.WriteLine("  <tr align=\"left\">" + Environment.NewLine + "    <td>Thematic_Headings</td>" + Environment.NewLine + "    <td>List&lt;SobekCM.Library.Aggregations.Thematic_Heading&gt;</td>" + Environment.NewLine + "  </tr>");

                Output.WriteLine("  <tr><td bgcolor=\"#e7e7e7\" colspan=\"2\"></td></tr>");
                Output.WriteLine("  <tr align=\"left\">" + Environment.NewLine + "    <td>Translation</td>" + Environment.NewLine + "    <td>SobekCM.Library.Application_State.Language_Support_Info</td>" + Environment.NewLine + "  </tr>");

                Output.WriteLine("  <tr><td bgcolor=\"#e7e7e7\" colspan=\"2\"></td></tr>");
                Output.WriteLine("  <tr align=\"left\">" + Environment.NewLine + "    <td>URL_Portals</td>" + Environment.NewLine + "    <td>SobekCM.Library.Application_State.Portal_List</td>" + Environment.NewLine + "  </tr>");

                Output.WriteLine("  <tr><td bgcolor=\"#e7e7e7\" colspan=\"2\"></td></tr>");
                Output.WriteLine("  <tr align=\"left\">" + Environment.NewLine + "    <td>Version</td>" + Environment.NewLine + "    <td>string</td>" + Environment.NewLine + "  </tr>");

                // Close out this table
                Output.WriteLine("  <tr><td bgcolor=\"#e7e7e7\" colspan=\"2\"></td></tr>");
                Output.WriteLine("</table>");

                // Start the application data
                Output.WriteLine("<br /><br />");

                // Add the header information
                Output.WriteLine("<table width=\"720px\" cellspacing=\"0px\">");
                Output.WriteLine("  <tr align=\"center\" bgcolor=\"#0022a7\"><td colspan=\"2\"><span style=\"color: White\"><b>" + application_state + "</b></span></td></tr>");
                Output.WriteLine("  <tr align=\"left\" bgcolor=\"#7d90d5\">");
                Output.WriteLine("    <th align=\"left\"><span style=\"color: White\">" + key + "</span></th>");
                Output.WriteLine("    <th align=\"left\"><span style=\"color: White\">" + objectTitle + "</span></th>");
                Output.WriteLine("  </tr>");

                try
                {
                    // Step through all the keys
                    string[] allkeys = applicationState.AllKeys;
                    if (allkeys.Length == 0)
                    {
                        Output.WriteLine("  <tr><td bgcolor=\"#e7e7e7\" colspan=\"2\"></td></tr>");
                        Output.WriteLine("  <tr align=\"left\">");
                        Output.WriteLine("    <td><i>( none )</i></td>");
                        Output.WriteLine("    <td><i>( none )</td>");
                        Output.WriteLine("  </tr>");
                    }
                    else
                    {
                        foreach (string thisKey in allkeys)
                        {
                            // Add this row
                            Output.WriteLine("  <tr><td bgcolor=\"#e7e7e7\" colspan=\"2\"></td></tr>");
                            Output.WriteLine("  <tr align=\"left\">");
                            Output.WriteLine("    <td>" + thisKey + "</td>");
                            if (applicationState[thisKey] != null)
                            {
                                Output.WriteLine("    <td>" + applicationState[thisKey].GetType().FullName + "</td>");
                            }
                            else
                            {
                                Output.WriteLine("    <td><i>NULL</i></td>");
                            }
                            Output.WriteLine("  </tr>");
                        }
                    }
                }
                catch(Exception)
                {
                    Output.WriteLine("<strong>Error caught while pulling Application State memory management information</strong>");
                }

                // Close out this table
                Output.WriteLine("  <tr><td bgcolor=\"#e7e7e7\" colspan=\"2\"></td></tr>");
                Output.WriteLine("</table>");

                // Start the locally cached data
                Output.WriteLine("<br /><br />");

                // Add the header information
                Output.WriteLine("<table width=\"720px\" cellspacing=\"0px\">");
                Output.WriteLine("  <tr align=\"center\" bgcolor=\"#0022a7\"><td colspan=\"2\"><span style=\"color: White\"><b>" + local_cache_state + "</b></span></td></tr>");
                Output.WriteLine("  <tr align=\"left\" bgcolor=\"#7d90d5\">");
                Output.WriteLine("    <th align=\"left\"><span style=\"color: White\">" + key + "</span></th>");
                Output.WriteLine("    <th align=\"left\"><span style=\"color: White\">" + objectTitle + "</span></th>");
                Output.WriteLine("  </tr>");

                try
                {
                    // Now, get the information from the cache
                    ReadOnlyCollection<Cached_Object_Info> locally_cached_objects = CachedDataManager.Locally_Cached_Objects;
                    if (locally_cached_objects.Count == 0)
                    {
                        Output.WriteLine("  <tr><td bgcolor=\"#e7e7e7\" colspan=\"2\"></td></tr>");
                        Output.WriteLine("  <tr align=\"left\">");
                        Output.WriteLine("    <td><i>( none )</i></td>");
                        Output.WriteLine("    <td><i>( none )</td>");
                        Output.WriteLine("  </tr>");
                    }
                    else
                    {
                        foreach (Cached_Object_Info thisItem in locally_cached_objects)
                        {
                            // Add this row
                            Output.WriteLine("  <tr><td bgcolor=\"#e7e7e7\" colspan=\"2\"></td></tr>");
                            Output.WriteLine("  <tr align=\"left\">");
                            Output.WriteLine("    <td>" + thisItem.Object_Key + "</td>");
                            string type = thisItem.Object_Type.FullName;
                            if (type == "System.Collections.Generic.List`1[[System.String, mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089]]")
                                type = "generic List&lt;System.String&gt;";
                            Output.WriteLine("    <td>" + type + "</td>");
                            Output.WriteLine("  </tr>");
                        }
                    }
                }
                catch (Exception)
                {
                    Output.WriteLine("<strong>Error caught while pulling local cache memory management information</strong>");
                }

                // Close out this table
                Output.WriteLine("  <tr><td bgcolor=\"#e7e7e7\" colspan=\"2\"></td></tr>");
                Output.WriteLine("</table>");

                // Start the session data
                Output.WriteLine("<br /><br />");

                // Add the header information
                Output.WriteLine("<table width=\"720px\" cellspacing=\"0px\">");
                Output.WriteLine("  <tr align=\"center\" bgcolor=\"#0022a7\"><td colspan=\"2\"><span style=\"color: White\"><b>" + session_state + "</b></span></td></tr>");
                Output.WriteLine("  <tr align=\"left\" bgcolor=\"#7d90d5\">");
                Output.WriteLine("    <th align=\"left\"><span style=\"color: White\">" + key + "</span></th>");
                Output.WriteLine("    <th align=\"left\"><span style=\"color: White\">" + objectTitle + "</span></th>");
                Output.WriteLine("  </tr>");

                try
                {
                    // Now, get the information from the Session
                    //	System.Collections.Specialized.NameObjectCollectionBase.KeysCollection sessionkeys = Session.Keys;
                    if (session.Count == 0)
                    {
                        Output.WriteLine("  <tr><td bgcolor=\"#e7e7e7\" colspan=\"2\"></td></tr>");
                        Output.WriteLine("  <tr align=\"left\">");
                        Output.WriteLine("    <td><i>( none )</i></td>");
                        Output.WriteLine("    <td><i>( none )</td>");
                        Output.WriteLine("  </tr>");
                    }
                    else
                    {
                        foreach (string thisKey in session.Keys)
                        {
                            // Add this row
                            Output.WriteLine("  <tr><td bgcolor=\"#e7e7e7\" colspan=\"2\"></td></tr>");
                            Output.WriteLine("  <tr align=\"left\">");
                            Output.WriteLine("    <td>" + thisKey + "</td>");
                            Output.WriteLine("    <td>" + session[thisKey].GetType().FullName + "</td>");
                            Output.WriteLine("  </tr>");
                        }
                    }
                }
                catch (Exception)
                {
                    Output.WriteLine("<strong>Error caught while pulling Session State memory management information</strong>");
                }

                // Close out this table
                Output.WriteLine("  <tr><td bgcolor=\"#e7e7e7\" colspan=\"2\"></td></tr>");
                Output.WriteLine("</table>");
                Output.WriteLine("<br /><br />");
                Output.WriteLine();
        }

        #endregion

        #region Method to add the master tree of ALL aggrgeations

        /// <summary> Adds information about all aggregationPermissions to the response stream </summary>
        /// <param name="Output"> Stream to which to write the HTML for this subwriter </param>
        /// <param name="Tracer"> Trace object keeps a list of each method executed and important milestones in rendering </param>
        protected internal void add_aggregations_tree_html(TextWriter Output, Custom_Tracer Tracer)
        {
            Tracer.Add_Trace("Internal_HtmlSubwriter.add_aggregations_tree_html", "Rendering HTML");

            Output.WriteLine("<script type=\"text/javascript\" src=\"" + Static_Resources_Gateway.Jstree_Js + "\"></script>");

            // Get the hierarchy
            Aggregation_Hierarchy hierarchy = SobekEngineClient.Aggregations.Get_Aggregation_Hierarchy(Tracer);

            if (hierarchy != null)
            {
                // Add the text
                Output.WriteLine("<div class=\"sbkIhsw_HomeText\">");
                Output.WriteLine("<p>Below is the complete master tree of all aggregations within this library.  This includes all active aggregations, as well as all hidden or inactive collections.</p>");
                Output.WriteLine("<br />");


                RequestSpecificValues.Current_Mode.Internal_Type = Internal_Type_Enum.Aggregations_List;
                string url = UrlWriterHelper.Redirect_URL(RequestSpecificValues.Current_Mode);
                RequestSpecificValues.Current_Mode.Internal_Type = Internal_Type_Enum.Aggregations_Tree;

                Output.WriteLine("<p><a href=\"" + url + "\">Click here to view the aggregations in table view</a></p>");
                Output.WriteLine("<br />");

                Output.WriteLine("<blockquote>");
                Output.WriteLine("  <div style=\"text-align:right;\">");
                Output.WriteLine("    <a onclick=\"$('#aggregationTree').jstree('close_all');return false;\">Collapse All</a> | ");
                Output.WriteLine("    <a onclick=\"$('#aggregationTree').jstree('open_all');return false;\">Expand All</a>");
                Output.WriteLine("  </div>");
                

                Output.WriteLine("  <div id=\"aggregationTree\">");
                Output.WriteLine("    <ul>");
                Output.WriteLine("      <li>Collection Hierarchy");

                RequestSpecificValues.Current_Mode.Mode = Display_Mode_Enum.Aggregation;

                // Step through each node under this
                if (hierarchy.Collections.Count > 0)
                {
                    Output.WriteLine("        <ul>");
                    foreach (Item_Aggregation_Related_Aggregations childAggr in hierarchy.Collections)
                    {
                            // Set the aggregation value, for the redirect URL
                            RequestSpecificValues.Current_Mode.Aggregation = childAggr.Code.ToLower();

                            Output.WriteLine("          <li><a href=\"" + UrlWriterHelper.Redirect_URL(RequestSpecificValues.Current_Mode) + "\"><abbr title=\"" + childAggr.Description + "\">" + childAggr.Name + "</abbr></a>");

                            // Check the children nodes recursively
                            add_children_to_tree("            ", Output, childAggr);

                            Output.WriteLine("          </li>");
                    }
                    Output.WriteLine("        </ul>");
                }
                Output.WriteLine("      </li>");

                if (hierarchy.Institutions.Count > 0)
                {
                    Output.WriteLine("      <li>Institutions");
                    Output.WriteLine("        <ul>");
                    foreach (Item_Aggregation_Related_Aggregations childAggr in hierarchy.Institutions)
                    {
                        if ((!childAggr.Hidden) && (childAggr.Active))
                        {
                            // Set the aggregation value, for the redirect URL
                            RequestSpecificValues.Current_Mode.Aggregation = childAggr.Code.ToLower();

                            Output.WriteLine("          <li><a href=\"" + UrlWriterHelper.Redirect_URL(RequestSpecificValues.Current_Mode) + "\"><abbr title=\"" + childAggr.Description + "\">" + childAggr.Name + "</abbr></a>");

                            // Check the children nodes recursively
                            add_children_to_tree("            ", Output, childAggr);

                            Output.WriteLine("          </li>");
                        }
                    }
                    Output.WriteLine("        </ul>");
                    Output.WriteLine("      </li>");
                }

                Output.WriteLine("    </ul>");
                Output.WriteLine("  </div>");
                Output.WriteLine("</blockquote>");
                Output.WriteLine("</div>");
                Output.WriteLine();

                Output.WriteLine("<script type=\"text/javascript\">");
                Output.WriteLine("   $('#aggregationTree').jstree().bind(\"select_node.jstree\", function (e, data) { var href = data.node.a_attr.href; document.location.href = href; });");
                Output.WriteLine("</script>");
                Output.WriteLine();

                // Restore the mode
                RequestSpecificValues.Current_Mode.Mode = Display_Mode_Enum.Internal;
                RequestSpecificValues.Current_Mode.Aggregation = String.Empty;
            }
        }


        private void add_children_to_tree(string LeadingSpaces, TextWriter Output, Item_Aggregation_Related_Aggregations Aggr)
        {
            // Step through each node under this
            if (Aggr.Children_Count > 0)
            {
                Output.WriteLine(LeadingSpaces + "<ul>");
                foreach (Item_Aggregation_Related_Aggregations childAggr in Aggr.Children)
                {
                    // Set the aggregation value, for the redirect URL
                    RequestSpecificValues.Current_Mode.Aggregation = childAggr.Code.ToLower();

                    if (childAggr.Children_Count > 0)
                    {
                        Output.WriteLine(LeadingSpaces + "  <li><a href=\"" + UrlWriterHelper.Redirect_URL(RequestSpecificValues.Current_Mode) + "\"><abbr title=\"" + childAggr.Description + "\">" + childAggr.Name + "</abbr></a>");

                        // Check the children nodes recursively
                        add_children_to_tree(LeadingSpaces + "   ", Output, childAggr);

                        Output.WriteLine(LeadingSpaces + "  </li>");
                    }
                    else
                    {
                        Output.WriteLine(LeadingSpaces + "  <li><a href=\"" + UrlWriterHelper.Redirect_URL(RequestSpecificValues.Current_Mode) + "\"><abbr title=\"" + childAggr.Description + "\">" + childAggr.Name + "</abbr></a></li>");
                    }

                }
                Output.WriteLine(LeadingSpaces + "</ul>");
            }
        }

        #endregion

        #region Method to add the master list of ALL aggregations

        /// <summary> Adds information about all aggregationPermissions to the response stream </summary>
        /// <param name="Output"> Stream to which to write the HTML for this subwriter </param>
        /// <param name="Tracer"> Trace object keeps a list of each method executed and important milestones in rendering </param>
        protected internal void add_aggregations_master_list_html(TextWriter Output, Custom_Tracer Tracer)
        {
            Tracer.Add_Trace("Internal_HtmlSubwriter.add_aggregations_master_list_html", "Rendering HTML");

            // Add text at the top and sort the dataset if necessary
            Output.WriteLine("<div class=\"sbkIhsw_HomeText\">");
            Output.WriteLine("<p>Below is the complete master list of all aggregations within this library.  This includes all active aggregations, as well as all hidden or inactive collections.</p>");
            Output.WriteLine("<br />");
            RequestSpecificValues.Current_Mode.Internal_Type = Internal_Type_Enum.Aggregations_Tree;
            string url = UrlWriterHelper.Redirect_URL(RequestSpecificValues.Current_Mode);
            RequestSpecificValues.Current_Mode.Internal_Type = Internal_Type_Enum.Aggregations_List;

            Output.WriteLine("<p><a href=\"" + url + "\">Click here to view the aggregations in tree view</a></p>");
            Output.WriteLine("<br />");

            Output.WriteLine("  <table class=\"sbkIhsw_Table display\" id=\"adminMgmtTable\">");
            Output.WriteLine("    <thead>");
            Output.WriteLine("      <tr>");
            Output.WriteLine("        <th>CODE</th>");
            Output.WriteLine("        <th>TYPE</th>");
            Output.WriteLine("        <th>NAME</th>");
            Output.WriteLine("        <th>ACTIVE</th>");
            Output.WriteLine("        <th>ON HOME</th>");
            Output.WriteLine("        <th>PARENT</th>");
            Output.WriteLine("      </tr>");
            Output.WriteLine("    </thead>");

            Output.WriteLine("    <tfoot>");
            Output.WriteLine("      <tr>");
            Output.WriteLine("        <th><input id=\"intAggrCodeSearch\" type=\"text\" placeholder=\"Search Code\" /></th>");
            Output.WriteLine("        <th>TYPE</th>");
            Output.WriteLine("        <th><input id=\"intAggrNameSearch\"  type=\"text\" placeholder=\"Search Name\" /></th>");
            Output.WriteLine("        <th>ACTIVE</th>");
            Output.WriteLine("        <th>ON HOME</th>");
            Output.WriteLine("        <th>PARENT</th>");
            Output.WriteLine("      </tr>");
            Output.WriteLine("    </tfoot>");

            Output.WriteLine("    <tbody>");

            // Show all the aggregations
            RequestSpecificValues.Current_Mode.Mode = Display_Mode_Enum.Aggregation;
            string last_code = String.Empty;
            foreach (Item_Aggregation_Related_Aggregations thisAggr in UI_ApplicationCache_Gateway.Aggregations.All_Aggregations)
            {
                if (thisAggr.Code != last_code)
                {
                    last_code = thisAggr.Code;

                    // Build the action links
                    if (thisAggr.Active)
                        Output.WriteLine("      <tr>");
  //                      Output.WriteLine("        <td class=\"sbkAsav_ActionLink\" >( <a title=\"Click to view this item aggregation\" href=\"" + RequestSpecificValues.Current_Mode.Base_URL + "l/" + thisAggr.Code + "\">view</a> )");
                    else
                        Output.WriteLine("      <tr>");

                    // Special code to start istitutions with a small letter 'i'
                    string code = thisAggr.Code;
                    if ((thisAggr.Type.IndexOf("Institution", StringComparison.InvariantCultureIgnoreCase) >= 0) && (code[0] == 'I') && (code.Length > 1))
                    {
                        code = "i" + code.Substring(1);
                    }

                    // Get the URL
                    string link_url = RequestSpecificValues.Current_Mode.Base_URL + "/" + code.ToLower();

                    // Add the rest of the row with data
                    Output.WriteLine("        <td><a href=\"" + link_url + "\">" + code + "</a></td>");
                    Output.WriteLine("        <td>" + thisAggr.Type + "</td>");
                    Output.WriteLine("        <td><a href=\"" + link_url + "\">" + thisAggr.Name + "</a></td>");

                    Output.WriteLine(thisAggr.Active ? "        <td>Y</td>" : "        <td>N</td>");

                    Output.WriteLine(thisAggr.Thematic_Heading != null ? "        <td>Y</td>" : "        <td>N</td>");
                    if (thisAggr.Parent_Count > 0)
                    {
                        Output.WriteLine("        <td>" + thisAggr.Parents[0].Code + "</td>");
                    }
                    else
                    {
                        Output.WriteLine("        <td></td>");
                    }
                    Output.WriteLine("      </tr>");
                }
            }

            Output.WriteLine("    </tbody>");
            Output.WriteLine("  </table>");

            Output.WriteLine("<script type=\"text/javascript\">");
            Output.WriteLine("    $(document).ready(function() { ");
            Output.WriteLine("        var table = $('#adminMgmtTable').DataTable({ ");

            // If 100 or less aggregations, suppress paging
            if (UI_ApplicationCache_Gateway.Aggregations.All_Aggregations.Count <= 100)
            {
                Output.WriteLine("            \"paging\":   false, ");
                Output.WriteLine("            \"info\":   false, ");
            }
            else
            {
                Output.WriteLine("            \"lengthMenu\": [ [50, 100, -1], [50, 100, \"All\"] ], ");
                Output.WriteLine("            \"pageLength\":  50, ");
            }

            Output.WriteLine("            initComplete: function () {");
            Output.WriteLine("                var api = this.api();");

            Output.WriteLine("                api.columns().indexes().flatten().each( function ( i ) {");
            Output.WriteLine("                    if (( i == 1 || i == 3 || i == 4 || i == 5 )) {");
            Output.WriteLine("                        var column = api.column( i );");
            Output.WriteLine("                        var select = $('<select><option value=\"\"></option></select>')");
            Output.WriteLine("                                 .appendTo( $(column.footer()).empty() )");
            Output.WriteLine("                                 .on( 'change', function () {");
            Output.WriteLine("                                       var val = $.fn.dataTable.util.escapeRegex($(this).val());");
            Output.WriteLine("                                       column.search( val ? '^'+val+'$' : '', true, false ).draw();");
            Output.WriteLine("                                        } );");
            Output.WriteLine("                                 column.data().unique().sort().each( function ( d, j ) {");
            Output.WriteLine("                                      select.append( '<option value=\"'+d+'\">'+d+'</option>' )");
            Output.WriteLine("                                 } );");
            Output.WriteLine("                        }");
            Output.WriteLine("                    } );");
            Output.WriteLine("               }");
            Output.WriteLine("         });");

            Output.WriteLine("         $('#intAggrCodeSearch').on( 'keyup change', function () { table.column( 0 ).search( this.value ).draw(); } );");
            Output.WriteLine("         $('#intAggrNameSearch').on( 'keyup change', function () { table.column( 2 ).search( this.value ).draw(); } );");

            Output.WriteLine("         $('#adminMgmtTable').on('click', 'tr', function(ev) {");
            Output.WriteLine("             var aData = $('#adminMgmtTable').dataTable().fnGetData(this);");
            Output.WriteLine("             key = aData[0];");
            Output.WriteLine("             window.location.href = \"" + RequestSpecificValues.Current_Mode.Base_URL + "/\" + key;");
            Output.WriteLine("             ev.preventDefault();");
            Output.WriteLine("             ev.stopPropagation();");
            Output.WriteLine("          });");
            Output.WriteLine("    } );");

            Output.WriteLine("</script>");
            Output.WriteLine();


            Output.WriteLine("  <br />");
            Output.WriteLine("</div>");
            Output.WriteLine();
        }

        #endregion

        #region Method to add the list of all new and recently changed items

        /// <summary> Adds the list of all new and recently changed items to the response stream </summary>
        /// <param name="Output"> Stream to which to write the HTML for this subwriter </param>
        /// <param name="New_Items"> The list of recently added/changed items to display </param>
        /// <param name="Tracer"> Trace object keeps a list of each method executed and important milestones in rendering </param>
        protected internal void add_new_item_html(TextWriter Output, DataTable New_Items, Custom_Tracer Tracer)
        {
            // Create the strings for the sub views
            const string BIBID = "BIBID : VID";
            string last_event = "DATE";
            string mets_type = "METS TYPE";
            const string ALL_TYPES = "ALL";

            string online_edits = "ONLINE EDITS";
            string online_submits = "ONLINE SUBMITS";
            string visibility = "VISIBILITY CHANGES";
            string bulk_loaded = "BULK LOADED";
            string post_processed = "POST-PROCESSED";


            switch (RequestSpecificValues.Current_Mode.Language)
            {
                case Web_Language_Enum.French:
                    last_event = "Dernière année de construction";
                    mets_type = "Type de METS";
                    break;

                case Web_Language_Enum.Spanish:
                    last_event = "Última Construido";
                    mets_type = "Tipe de METS";
                    break;
            }

            // If there was no count, or no rows returned, say something
            if ((New_Items == null) || (New_Items.Rows.Count == 0))
            {
                Output.WriteLine("<br /><br /><strong>NO NEW ITEMS</strong><br /><br />");
                return;
            }

            // Get the submode
            string type = RequestSpecificValues.Current_Mode.Info_Browse_Mode;

            // Make sure the value is one of the set values
            if ((type != String.Empty) && (type != "all") && (type != "edit") && (type != "submit") && (type != "visibility") && (type != "bulkloaded") && (type != "postprocessed"))
                type = String.Empty;

            // set to ALL as default if there aren't an extraordinary number of rows
            if ((New_Items.Rows.Count < 5000) && ( type.Length == 0 ))
            {
                type = "all";
            }

            // Add the number of each metadata type to the end
            online_edits = online_edits + " ( " + New_Items.Select("WorkFlowName = 'Online Edit'").Length + " )";
            online_submits = online_submits + " ( " + New_Items.Select("WorkFlowName = 'Online Submit'").Length + " )";
            visibility = visibility + " ( " + New_Items.Select("WorkFlowName='Made Private' or WorkFlowName='Made Public' or WorkFlowName='Made Restricted'").Length + " )";
            bulk_loaded = bulk_loaded + " ( " + New_Items.Select("WorkFlowName = 'Bulk Loaded'").Length + " )";
            post_processed = post_processed + " ( " + New_Items.Select("WorkFlowName = 'Post-Processed'").Length + " )";


			Output.WriteLine("<div id=\"sbkInternalHsw_ViewSelectDiv\">");
			Output.WriteLine("  <ul class=\"sbk_FauxDownwardTabsList\">");

            string baseLocationUrl = String.IsNullOrEmpty(UI_ApplicationCache_Gateway.Settings.Servers.Base_SobekCM_Location_Relative) ? String.Empty : UI_ApplicationCache_Gateway.Settings.Servers.Base_SobekCM_Location_Relative;


            if (type == "all")
            {
                Output.WriteLine("    <li class=\"current\">" + ALL_TYPES + "</li>");
            }
            else
            {
                RequestSpecificValues.Current_Mode.Info_Browse_Mode = "all";
                Output.WriteLine("    <li><a href=\"" + baseLocationUrl + UrlWriterHelper.Redirect_URL(RequestSpecificValues.Current_Mode) + "\">" + ALL_TYPES + "</a></li>");
            }

            if (type == "edit")
            {
				Output.WriteLine("    <li class=\"current\">" + online_edits + "</li>");
            }
            else
            {
                RequestSpecificValues.Current_Mode.Info_Browse_Mode = "edit";
                Output.WriteLine("    <li><a href=\"" + baseLocationUrl + UrlWriterHelper.Redirect_URL(RequestSpecificValues.Current_Mode) + "\">" + online_edits + "</a></li>");
            }

            if (type == "submit")
            {
				Output.WriteLine("    <li class=\"current\">" + online_submits + "</li>");
            }
            else
            {
                RequestSpecificValues.Current_Mode.Info_Browse_Mode = "submit";
                Output.WriteLine("    <li><a href=\"" + baseLocationUrl + UrlWriterHelper.Redirect_URL(RequestSpecificValues.Current_Mode) + "\">" + online_submits + "</a></li>");
            }

            if (type == "visibility")
            {
				Output.WriteLine("    <li class=\"current\">" + visibility + "</li>");
            }
            else
            {
                RequestSpecificValues.Current_Mode.Info_Browse_Mode = "visibility";
                Output.WriteLine("    <li><a href=\"" + baseLocationUrl + UrlWriterHelper.Redirect_URL(RequestSpecificValues.Current_Mode) + "\">" + visibility + "</a></li>");
            }

            if (type == "bulkloaded")
            {
				Output.WriteLine("    <li class=\"current\">" + bulk_loaded + "</li>");
            }
            else
            {
                RequestSpecificValues.Current_Mode.Info_Browse_Mode = "bulkloaded";
                Output.WriteLine("    <li><a href=\"" + baseLocationUrl + UrlWriterHelper.Redirect_URL(RequestSpecificValues.Current_Mode) + "\">" + bulk_loaded + "</a></li>");
            }

            if (type == "postprocessed")
            {
				Output.WriteLine("    <li class=\"current\">" + post_processed + "</li>");
            }
            else
            {
                RequestSpecificValues.Current_Mode.Info_Browse_Mode = "postprocessed";
                Output.WriteLine("    <li><a href=\"" + baseLocationUrl + UrlWriterHelper.Redirect_URL(RequestSpecificValues.Current_Mode) + "\">" + post_processed + "</a></li>");
            }
			Output.WriteLine("</ul>");
            Output.WriteLine("</div>");
            RequestSpecificValues.Current_Mode.Info_Browse_Mode = type;

            Output.WriteLine("<br />");
            Output.WriteLine("");

            string thisDate;
            string lastDate = String.Empty;

            bool display_user = false;
            int columns = 3;
            int width = 600;
            if ((RequestSpecificValues.Current_User != null) && (RequestSpecificValues.Current_User.Is_Internal_User))
            {
                display_user = true;
                columns = 4;
                width = 750;
            }

            if (type.Length == 0)
            {
                Output.WriteLine("<div class=\"SobekText\">");
                Output.WriteLine("<br />");
                Output.WriteLine("<p>There have been an unusually large number of updates over the last week.</p>");
                Output.WriteLine("<p>Select the update type tab above to view the details.</p>");
                Output.WriteLine("<br />");
                Output.WriteLine("<br />");
                Output.WriteLine("</div>");
                return;
            }

            Output.WriteLine("<br />");


            // Now, add each line
            if (type == "all")
            {
                if (New_Items.Rows.Count > 0)
                {
                    // Add the header information
                    Output.WriteLine("<table width=\"" + width + "px\" border=\"0px\" cellspacing=\"0px\">");
                    Output.WriteLine("  <tr align=\"left\" bgcolor=\"#0022a7\" >");
                    Output.WriteLine("    <th align=\"left\"><span style=\"color: White\"><b>" + BIBID + "</b></span></th>");
                    Output.WriteLine("    <th align=\"left\"><span style=\"color: White\"><b>" + last_event + "</b></span></th>");
                    Output.WriteLine("    <th align=\"left\"><span style=\"color: White\"><b>" + mets_type + "</b></span></th>");
                    if (display_user)
                    {
                        Output.WriteLine("    <th align=\"left\"><span style=\"color: White\"><b>USER</b></span></th>");
                    }
                    Output.WriteLine("  </tr>");

                    foreach (DataRow thisRow in New_Items.Rows)
                    {
                        // Get this date
                        thisDate = thisRow[2].ToString().Split(" ".ToCharArray())[0];

                        // Is this a new date?
                        if (thisDate != lastDate)
                        {
                            Output.WriteLine("  <tr align=\"left\" bgcolor=\"#7d90d5\" ><td colspan=\"" + columns + "\"><span style=\"color: White\"><b>" + thisDate + "</b></span></td></tr>");

                            lastDate = thisDate;
                        }

                        Output.WriteLine("  <tr><td bgcolor=\"#e7e7e7\" colspan=\"" + columns + "\"></td></tr>");
                        Output.WriteLine("  <tr align=\"left\">");
                        Output.WriteLine("    <td><a href=\"" + RequestSpecificValues.Current_Mode.Base_URL + thisRow[0] + "/" + thisRow[1] + "\">" + thisRow[0] + " : " + thisRow[1] + "</a></td>");
                        Output.WriteLine("    <td>" + thisRow[2] + "</td>");
                        Output.WriteLine("    <td>" + thisRow[3] + "</td>");

                        if (display_user)
                        {
                            Output.WriteLine("    <td>" + thisRow[4] + "</td>");
                        }

                        Output.WriteLine("  </tr>");
                    }

                    Output.WriteLine("  <tr><td bgcolor=\"#e7e7e7\" colspan=\"" + columns + "\"></td></tr>");
                    Output.WriteLine("</table>");
                }
                else
                {
                    Output.WriteLine("<br />");
                    Output.WriteLine("<center>NO TRACKING INFORMATION FOR YOUR SELECTION.</center>");
                    Output.WriteLine("<br />");
                }
            }
            else
            {
                DataRow[] matches = null;
                switch (type)
                {
                    case "edit":
                        matches = New_Items.Select("WorkFlowName = 'Online Edit'");
                        break;

                    case "submit":
                        matches = New_Items.Select("WorkFlowName = 'Online Submit'");
                        break;

                    case "visibility":
                        matches = New_Items.Select("WorkFlowName='Made Private' or WorkFlowName='Made Public' or WorkFlowName='Made Restricted'");
                        break;

                    case "bulkloaded":
                        matches = New_Items.Select("WorkFlowName = 'Bulk Loaded'");
                        break;

                    case "postprocessed":
                        matches = New_Items.Select("WorkFlowName = 'Post-Processed'");
                        break;
                }

                if ((matches != null) && ( matches.Length > 0 ))
                {
                    // Add the header information
                    Output.WriteLine("<table width=\"" + width + "px\" border=\"0px\" cellspacing=\"0px\">");
                    Output.WriteLine("  <tr align=\"left\" bgcolor=\"#0022a7\" >");
                    Output.WriteLine("    <th><span style=\"color: White\"><b>" + BIBID + "</b></span></th>");
                    Output.WriteLine("    <th><span style=\"color: White\"><b>" + last_event + "</b></span></th>");
                    Output.WriteLine("    <th><span style=\"color: White\"><b>" + mets_type + "</b></span></th>");
                    if (display_user)
                    {
                        Output.WriteLine("    <th><span style=\"color: White\"><b>USER</b></span></th>");
                    }
                    Output.WriteLine("  </tr>");

                    foreach (DataRow thisRow in matches)
                    {
                        // Get this date
                        thisDate = thisRow[2].ToString().Split(" ".ToCharArray())[0];

                        // Is this a new date?
                        if (thisDate != lastDate)
                        {
                            Output.WriteLine("  <tr align=\"left\" bgcolor=\"#7d90d5\" ><td colspan=\"" + columns + "\"><span style=\"color: White\"><b>" + thisDate + "</b></span></td></tr>");

                            lastDate = thisDate;
                        }

                        Output.WriteLine("  <tr><td bgcolor=\"#e7e7e7\" colspan=\"" + columns + "\"></td></tr>");
                        Output.WriteLine("  <tr align=\"left\">");
                        Output.WriteLine("    <td><a href=\"" + RequestSpecificValues.Current_Mode.Base_URL + thisRow[0] + "/" + thisRow[1] + "\">" + thisRow[0] + " : " + thisRow[1] + "</a></td>");
                        Output.WriteLine("    <td>" + thisRow[2] + "</td>");
                        Output.WriteLine("    <td>" + thisRow[3] + "</td>");

                        if (display_user)
                        {
                            Output.WriteLine("    <td>" + thisRow[4] + "</td>");
                        }

                        Output.WriteLine("  </tr>");
                    }

                    Output.WriteLine("  <tr><td bgcolor=\"#e7e7e7\" colspan=\"" + columns + "\"></td></tr>");
                    Output.WriteLine("</table>");
                }
                else
                {
                    Output.WriteLine("<br />");
                    Output.WriteLine("<center>NO INFORMATION FOR YOUR SELECTION.</center>");
                    Output.WriteLine("<br />");
                }
            }

            Output.WriteLine("<br />");
            Output.WriteLine();
        }

        #endregion

        #region Method to convert between the month sequence and the english month name

        /// <summary> Convert between the month sequence and the english month name </summary>
        /// <param name="Month_Int"> Sequence for the month to return the string for </param>
        /// <returns> The name of the month indicated, or INVALID </returns>
        protected internal string Month_From_Int(int Month_Int)
        {
            string monthString1 = "Invalid";
            switch (Month_Int)
            {
                case 1:
                    monthString1 = "January";
                    break;

                case 2:
                    monthString1 = "February";
                    break;

                case 3:
                    monthString1 = "March";
                    break;

                case 4:
                    monthString1 = "April";
                    break;

                case 5:
                    monthString1 = "May";
                    break;

                case 6:
                    monthString1 = "June";
                    break;

                case 7:
                    monthString1 = "July";
                    break;

                case 8:
                    monthString1 = "August";
                    break;

                case 9:
                    monthString1 = "September";
                    break;

                case 10:
                    monthString1 = "October";
                    break;

                case 11:
                    monthString1 = "November";
                    break;

                case 12:
                    monthString1 = "December";
                    break;
            }
            return monthString1;
        }

        #endregion


        /// <summary> Write any additional values within the HTML Head of the
        /// final served page </summary>
        /// <param name="Output"> Output stream currently within the HTML head tags </param>
        /// <param name="Tracer"> Trace object keeps a list of each method executed and important milestones in rendering </param>
        public override void Write_Within_HTML_Head(TextWriter Output, Custom_Tracer Tracer)
        {
            Output.WriteLine("  <meta name=\"robots\" content=\"noindex, nofollow\" />");

            if (RequestSpecificValues.Current_Mode.Internal_Type == Internal_Type_Enum.Aggregations_List)
            {
                Output.WriteLine("  <link href=\"" + Static_Resources_Gateway.Sobekcm_Datatables_Css + "\" rel=\"stylesheet\" type=\"text/css\" />");
                Output.WriteLine("  <script type=\"text/javascript\" src=\"" + Static_Resources_Gateway.Jquery_Datatables_Js + "\" ></script>");
            }

            if (RequestSpecificValues.Current_Mode.Internal_Type == Internal_Type_Enum.Aggregations_Tree)
            {
                Output.WriteLine("  <link rel=\"stylesheet\" href=\"" + Static_Resources_Gateway.Jstree_Css + "\" />");
            }

        }

        /// <summary>  Gets the collection of special behaviors which this subwriter
        /// requests from the main HTML writer.  </summary>
        public override List<HtmlSubwriter_Behaviors_Enum> Subwriter_Behaviors
        {
            get { return new List<HtmlSubwriter_Behaviors_Enum> { HtmlSubwriter_Behaviors_Enum.Suppress_Banner }; }
        }

        /// <summary> Writes final HTML after all the forms </summary>
        /// <param name="Output">Stream to directly write to</param>
        /// <param name="Tracer">Trace object keeps a list of each method executed and important milestones in rendering</param>
        public override void Write_Final_HTML(TextWriter Output, Custom_Tracer Tracer)
        {
            Output.WriteLine("<!-- Close the pagecontainer div -->");
            Output.WriteLine("</div>");
            Output.WriteLine();
        }

		/// <summary> Gets the CSS class of the container that the page is wrapped within </summary>
		public override string Container_CssClass
		{
			get
			{
                if (RequestSpecificValues.Current_Mode.Internal_Type == Internal_Type_Enum.Wordmarks)
					return "container-inner1000";

                if (RequestSpecificValues.Current_Mode.Internal_Type == Internal_Type_Enum.Aggregations_List)
					return "container-inner1215";

				return base.Container_CssClass;
			}
		}
    }
}
